import cv2
import numpy as np
import matplotlib.pyplot as plt
cap=cv2.VideoCapture(0)
count=0
for i in range(1000):
    t,frame=cap.read()
    cv2.imwrite(str(i)+".png",frame)
    c=cv2.waitKey(1)
    if c==27:
        break
    cv2.imshow("face",frame)
cap.release()
cv2.destroyAllWindows()
import os
from tqdm import tqdm

DATADIR=r"C:\Users\LENOVO\Desktop\lco\day33\face"
CATEGORIES =["my_face","cat"]
for category in CATEGORIES:
    path=os.path.join(DATADIR,category)
    for img in os.listdir(path):
        img_array=cv2.imread(os.path.join(path,img),cv2.IMREAD_GRAYSCALE)
        plt.imshow(img_array,cmap="gray")
        plt.show()
        break
    break
    IMG_SIZE=50
new_array=cv2.resize(img_array,(IMG_SIZE,IMG_SIZE))
plt.imshow(new_array,cmap="gray")
plt.show()
training_data =[]
def create_training_data():
    for category in CATEGORIES:
        path =os.path.join(DATADIR,category)
        class_num=CATEGORIES.index(category)
        for img in tqdm(os.listdir(path)):
            try:
                img_array=cv2.imread(os.path.join(path,img),cv2.IMREAD_GRAYSCALE)
                new_array=cv2.resize(img_array,(IMG_SIZE,IMG_SIZE))
                training_data.append([new_array,class_num])
            except Exception as e:
                pass
create_training_data()
print(len(training_data))
import random
random.shuffle(training_data)
X=[]
y=[]
for features,label in training_data:
    X.append(features)
    y.append(label)
print(X[0].reshape(-1,IMG_SIZE,IMG_SIZE,1))
X=np.array(X).reshape(-1,IMG_SIZE,IMG_SIZE,1)
import pickle

pickle_out=open("X.pickle","wb")
pickle.dump(X,pickle_out)
pickle_out.close()

pickle_out=open("y.pickle","wb")
pickle.dump(y,pickle_out)
pickle_out.close()
pickle_in=open("X.pickle","rb")
X=pickle.load(pickle_in)

pickle_in=open("y.pickle","rb")
y=pickle.load(pickle_in)
X=X/255.0
import keras 
from keras.models import Sequential
from keras.layers import Dense
from keras.optimizers import Adam
from keras.utils.np_utils import to_categorical
from keras.layers import Flatten
from keras.layers import Dropout
from keras.models import Model
from keras.layers.convolutional  import Conv2D
from keras.layers.convolutional import MaxPooling2D
def le_net():
    model=Sequential()
    model.add(Conv2D(256,(3,3),input_shape=(50,50,1),activation="relu"))
    model.add(MaxPooling2D(pool_size=(2,2)))
    model.add(Conv2D(256,(3,3),activation="relu"))
    model.add(MaxPooling2D(pool_size=(2,2)))
    model.add(Flatten())
    model.add((Dense(64,activation="relu")))
    model.add((Dense(1,activation="sigmoid")))
    model.compile(Adam(lr=0.001),loss="binary_crossentropy",metrics=["accuracy"])
    return model
lenet=le_net()
lenet.summary()
history=lenet.fit(X,y,batch_size=32,epochs=10,validation_split=0.1)
import requests as rq
from PIL import Image
url="https://news.nationalgeographic.com/content/dam/news/2018/05/17/you-can-train-your-cat/02-cat-training-NationalGeographic_1484324.jpg"
response=rq.get(url,stream=True)
img=Image.open(response.raw).convert("L")
plt.imshow(img,cmap="gray")
img_array=np.asarray(img)
res=cv2.resize(img_array,(50,50))
plt.imshow(res,cmap="gray")
res=res/255
res=res.reshape(1,50,50,1)
x=lenet.predict_classes(res)[0]
x
if x==1:
    print("CAT")
else:
    print("KAUSHIK")
                       
